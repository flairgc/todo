
DROP TABLE IF EXISTS tasks CASCADE;
DROP TABLE IF EXISTS sessions CASCADE;
DROP TABLE IF EXISTS users CASCADE;

DROP INDEX IF EXISTS idx_users_id;
DROP INDEX IF EXISTS idx_users_login;
DROP INDEX IF EXISTS sessions_user_id_idx;
DROP INDEX IF EXISTS tasks_user_id_idx;

-- оставлять ли id? пока думаю да, так как для регистрации может не потребуется логин, например если есть email или авторизация через сторонний сервис (Яндекс, телеграм)
CREATE TABLE users (
	id int GENERATED BY default AS IDENTITY NOT NULL,
	login text NULL,
	email text NULL,
	pass text NOT NULL,
	salt text NOT NULL,
	password_hint text NULL,
	name text NULL,
	created_at timestamp DEFAULT now() NOT NULL,
	updated_at timestamp DEFAULT now() NOT NULL,
	active boolean DEFAULT true NOT NULL,
	CONSTRAINT user_pk PRIMARY KEY (id),
	CONSTRAINT user_login_unique UNIQUE (login)
);
CREATE INDEX idx_users_id ON users(id);
CREATE INDEX idx_users_login ON users(login);

INSERT INTO users(
	id, login, pass, salt, password_hint, name, email, active)
	VALUES (
	1,
	'user',
	'1fe49dc2657227840a8b9d3bebf2a10aaf19e0d9219ffe0a7d7905ba067d722debeb9bad2f3ee71e06872b4d50d3c7a7965e4360ac2792f11ffb6a5f87e520e7',
	'38683eb569df483c83c1a0125559d9ae',
	'user',
	'Малышка',
	null,
	true);
commit;


CREATE TABLE sessions (
    user_id int NOT NULL,
	access_token text NOT NULL,
	refresh_token text NOT NULL,
	created_at timestamp DEFAULT now() NOT NULL,
	device text NULL,
	user_ip text NULL,
	CONSTRAINT sessions_access_unique UNIQUE (access_token),
	CONSTRAINT sessions_refresh_unique UNIQUE (refresh_token),
	CONSTRAINT sessions_users_fk FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET DEFAULT ON UPDATE SET DEFAULT
);
CREATE INDEX sessions_user_id_idx ON sessions USING btree (user_id);


CREATE TABLE tasks (
	id int GENERATED BY default AS IDENTITY NOT NULL,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    status TEXT NOT NULL DEFAULT 'not-done',  -- values: done, not-done
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT task_pk PRIMARY KEY (id)
);

CREATE INDEX tasks_user_id_idx ON tasks(user_id);

